RecyclerView


Precisamos fazer o inflate do layout no Fragment e retornar este layout. Por padrão, o método onCreateView() no fragment já faz isso, mas no meio do caminho temos que trazer a timeline.


public class TimelineActivityFragment extends Fragment {

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.fragment_timeline, container, false);

        //Timeline vai aqui

        return layout;
    }


Agora vamos definir a timeline efetivamente, então na classe do Fragment, defina o atributo RecyclerView:

private RecyclerView timeline;

@Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.fragment_timeline, container, false);

        //Trazer o layout da recyclerview que está no xml do fragment
        timeline = (RecyclerView) layout.findViewById(R.id.timeline_recyclerview);

        return layout;
    }


O xml deve estar mais ou menos assim:

    <android.support.v7.widget.RecyclerView
        android:id="@+id/timeline_recyclerview"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

    </android.support.v7.widget.RecyclerView>



Precisamos um adaptador de objetos para elementos visuais, então a classe PostAdapter vai ser criada:


public class PostAdapter {

}


Por sua vez, essa classe deve herdar de RecyclerView.Adapter

public class PostAdapter extends RecyclerView.Adapter<MyViewHolder> {

	@Override
    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    	return null;
    }

    @Override
    public void onBindViewHolder(MyViewHolder holder, int position) {
    }

    @Override
    public int getItemCount() {
        return 0;
    }
}

A classe MyViewHolder ainda será criada, e serve para manter os elementos visuais do Android (View).

public class MyViewHolder extends RecyclerView.ViewHolder {

    private TextView text;
    private ImageView image;

    public MyViewHolder(View itemView) {
        super(itemView);
        text = (TextView) itemView. findViewById(R.id.post_text);
        image = (ImageView) itemView. findViewById(R.id.post_icon);
    }

    public ImageView getImage() {
        return image;
    }

    public TextView getText() {
        return text;
    }

}


Esta classe por sua vez deve ter um arquivo de layout que responda a essa configuração, contendo um TextView e um ImageView:

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ImageView
        android:id="@+id/post_icon"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:src="@drawable/ic_launcher"
        />

    <TextView
        android:id="@+id/post_text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Post"
        android:layout_gravity="center_horizontal" />

</LinearLayout>


Voltando ao adapter, temos que implementar os métodos:


public class PostAdapter extends RecyclerView.Adapter<MyViewHolder>{

	private final LayoutInflater inflater;
    private List<Post> posts = Collections.emptyList();

    public PostAdapter(Context context, List<Post> posts){
        this.posts = posts;
        inflater = LayoutInflater.from(context);
    }


    //Aqui fazemos o inflate do layout do conteúdo do holder (post), passando o nome do arquivo de layout, o viewgroup e o booleano para //confirmar se o elemento será filho de outra view.
    //Por fim retornamos o holder, com a View como parâmetro

    @Override
    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = inflater.inflate(R.layout.post_row, parent, false);
        MyViewHolder holder = new MyViewHolder(view);
        return holder;
    }


    //Esse método faz o bind entre a View e o Holder. Pegamos o post que temos na mão (usando o position), setamos o conteúdo no Holder
    @Override
    public void onBindViewHolder(MyViewHolder holder, int position) {
        Post currentPost = posts.get(position);
        holder.getText().setText(currentPost.getTitle());
        holder.getImage().setImageResource(currentPost.getIdImage());
    }

    //Tamanho da lista, vai que você precisa...
    @Override
    public int getItemCount() {
        return posts.size();
    }
}


Perceba que usamos o modelo Post, mas ainda não o criamos. É um Objeto simples, contendo os valores que vão no holder

public class Post {

	//Esse será o id da Imagem, que será convertido em um ImageView
    private int idImage;
    //Esse será o texto do Post
    private String title;

    public Post(int idImage, String title) {
        this.idImage = idImage;
        this.title = title;
    }

    public int getIdImage() {
        return idImage;
    }

    public String getTitle() {
        return title;
    }


}


Por fim, usamos assim:


	private RecyclerView timeline;
    private PostAdapter adapter;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.fragment_timeline, container, false);

        timeline = (RecyclerView) layout.findViewById(R.id.timeline_recyclerview);
        //Instaciamos o adapter,passando a activity e as informações que serão
        //impressas na tela
        adapter = new PostAdapter(getActivity(), getData());
        //seta o adapter
        timeline.setAdapter(adapter);

        //Recebe um layout, que recebe o contexto
        timeline.setLayoutManager(new LinearLayoutManager(getActivity()));

        return layout;
    }


    //Informações que serão mostradas
    public List<Post> getData() {
        List<Post> posts = new ArrayList<>();

        posts.add(new Post(ic_launcher, "Primeiro"));
        posts.add(new Post(ic_launcher, "Segundo"));
        posts.add(new Post(ic_launcher, "Terceiro"));
        posts.add(new Post(ic_launcher, "Quarto"));
        posts.add(new Post(ic_launcher, "Quinto"));
        posts.add(new Post(ic_launcher, "Sexto"));
        posts.add(new Post(ic_launcher, "Sétimo"));
        posts.add(new Post(ic_launcher, "Oitavo"));
        posts.add(new Post(ic_launcher, "Nono"));
        posts.add(new Post(ic_launcher, "Décimo"));

        return posts;
    }
}



